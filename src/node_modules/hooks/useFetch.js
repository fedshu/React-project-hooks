import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';

import useLocalStorage from 'hooks/useLocalStorage';

export default url => {
   const baseUrl = 'https://conduit.productionready.io/api';
   const [isLoading, setIsLoading] = useState(false);
   const [response, setResponse] = useState(null);
   const [error, setError] = useState(null);
   const [options, setOptions] = useState({});
   const [token] = useLocalStorage('token');

   //using "useCallback"(memo) let you contain your custom hook in cache,
   //this is mean that your hook wouldn't refresh every time useEffect in []
   const doFetch = useCallback((options = {}) => {
      setOptions(options);
      setIsLoading(true);
   }, []); // - without [] wouldn't work!

   useEffect(() => {
      const requestOptions = {
         ...options,
         ...{
            headers: {
               authorization: token ? `Token ${token}` : ''
            }
         }
      }
      if (!isLoading) {
         return;
      };

      axios(baseUrl + url, requestOptions)
         .then(res => {
            console.log('success', res);
            setResponse(res.data);
            setIsLoading(false);
         })
         .catch(error => {
            console.log('error', error);
            setError(error.response.data);
            setIsLoading(false);
         })
   }, [isLoading, options, url, token]);

   return [{ isLoading, response, error }, doFetch];
}